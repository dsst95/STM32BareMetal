# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake on a single platform

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      matrix:
        config: [ "Debug", "Release", "Test" ]

    steps:
    - uses: actions/checkout@v4

    - name: Cache toolchains
      uses: actions/cache@v4
      env:
        cache-name: cache-toolchains
      with:
        path: |
          ${{github.workspace}}/llvm
        key: toolchains

    - name: Install GNU ARM Toolchain
      uses: carlosperate/arm-none-eabi-gcc-action@v1
      with:
        release: '13.3.Rel1'

    - name: Install LLVM and Clang
      uses: KyleMayes/install-llvm-action@v2
      with:
        version: '20.1.4'

    - name: Install Ninja
      uses: seanmiddleditch/gha-setup-ninja@v3

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -GNinja -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_TOOLCHAIN_FILE=${{github.workspace}}/cmake/gcc-arm-none-eabi.cmake -DCMAKE_BUILD_TYPE=${{ matrix.config }}
      if: ${{ matrix.config != 'Test' }}

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -GNinja -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_TOOLCHAIN_FILE=${{github.workspace}}/cmake/test-toolchain.cmake -DCMAKE_BUILD_TYPE=${{ matrix.config }}
      if: ${{ matrix.config == 'Test' }}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{ matrix.config }}

    - name: Test
      working-directory: ${{github.workspace}}/build/test/Tests
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest
      continue-on-error: false
      if: ${{ matrix.config == 'Test' }}

